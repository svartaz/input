const fs = require("fs");
const {
  replaceEach,
  scToTcs,
  valueToSingleton,
  hanzInRange,
} = require("./utility");

// hira, kana
const dict = valueToSingleton({
  a: "„ÅÇ",
  i: "„ÅÑ",
  u: "„ÅÜ",
  e: "„Åà",
  o: "„Åä",
  _a: "„ÅÅ",
  _i: "„ÅÉ",
  _u: "„ÅÖ",
  _e: "„Åá",
  _o: "„Åâ",
  ka: "„Åã",
  ki: "„Åç",
  ku: "„Åè",
  ke: "„Åë",
  ko: "„Åì",
  _ko: "õÑ≤",
  ca: "„Åå",
  ci: "„Åé",
  cu: "„Åê",
  ce: "„Åí",
  co: "„Åî",
  sa: "„Åï",
  si: "„Åó",
  su: "„Åô",
  se: "„Åõ",
  so: "„Åù",
  za: "„Åñ",
  zi: "„Åò",
  zu: "„Åö",
  ze: "„Åú",
  zo: "„Åû",
  ta: "„Åü",
  ti: "„Å°",
  tu: "„Å§",
  te: "„Å¶",
  to: "„Å®",
  t: "„Å£",
  _tu: "„Å£",
  da: "„Å†",
  di: "„Å¢",
  du: "„Å•",
  de: "„Åß",
  do: "„Å©",
  na: "„Å™",
  ni: "„Å´",
  nu: "„Å¨",
  ne: "„Å≠",
  no: "„ÅÆ",
  fa: "„ÅØ",
  fi: "„Å≤",
  fu: "„Åµ",
  fe: "„Å∏",
  fo: "„Åª",
  pa: "„Å±",
  pi: "„Å¥",
  pu: "„Å∑",
  pe: "„Å∫",
  po: "„ÅΩ",
  ba: "„Å∞",
  bi: "„Å≥",
  bu: "„Å∂",
  be: "„Åπ",
  bo: "„Åº",
  ma: "„Åæ",
  mi: "„Åø",
  mu: "„ÇÄ",
  me: "„ÇÅ",
  mo: "„ÇÇ",
  ja: "„ÇÑ",
  ji: "õÄÜ",
  ju: "„ÇÜ",
  je: "õÄÅ",
  jo: "„Çà",
  _ja: "„ÇÉ",
  _ju: "„ÇÖ",
  _jo: "„Çá",
  ra: "„Çâ",
  ri: "„Çä",
  ru: "„Çã",
  re: "„Çå",
  ro: "„Çç",
  wa: "„Çè",
  wi: "„Çê",
  wu: "õÑü",
  we: "„Çë",
  wo: "„Çí",
  _wa: "„Çé",
  _wi: "õÖê",
  _we: "õÖë",
  _wo: "õÖí",
  n: "„Çì",
  iti: "„Çù",
  "iti:": "„Çû",

  A: "„Ç¢",
  I: "„Ç§",
  U: "„Ç¶",
  E: "„Ç®",
  "E*": "õÄÄ",
  O: "„Ç™",
  _A: "„Ç°",
  _I: "„Ç£",
  _U: "„Ç•",
  _E: "„Çß",
  _O: "„Ç©",
  KA: "„Ç´",
  KI: "„Ç≠",
  KU: "„ÇØ",
  KE: "„Ç±",
  KO: "„Ç≥",
  _KA: "„Éµ",
  _KU: "„á∞",
  _KE: "„É∂",
  _KO: "õÖï",
  CA: "„Ç¨",
  CI: "„ÇÆ",
  CU: "„Ç∞",
  CE: "„Ç≤",
  CO: "„Ç¥",
  SA: "„Çµ",
  SI: "„Ç∑",
  SU: "„Çπ",
  SE: "„Çª",
  SO: "„ÇΩ",
  _SI: "„á±",
  _SU: "„á≤",
  ZA: "„Ç∂",
  ZI: "„Ç∏",
  ZU: "„Ç∫",
  ZE: "„Çº",
  ZO: "„Çæ",
  TA: "„Çø",
  TI: "„ÉÅ",
  TU: "„ÉÑ",
  TE: "„ÉÜ",
  TO: "„Éà",
  _TU: "„ÉÉ",
  T: "„ÉÉ",
  _TO: "„á≥",
  DA: "„ÉÄ",
  DI: "„ÉÇ",
  DU: "„ÉÖ",
  DE: "„Éá",
  DO: "„Éâ",
  NA: "„Éä",
  NI: "„Éã",
  NU: "„Éå",
  NE: "„Éç",
  NO: "„Éé",
  _NU: "„á¥",
  FA: "„Éè",
  FI: "„Éí",
  FU: "„Éï",
  FE: "„Éò",
  FO: "„Éõ",
  _FA: "„áµ",
  _FI: "„á∂",
  _FU: "„á∑",
  _FE: "„á∏",
  _FO: "„áπ",
  PA: "„Éë",
  PI: "„Éî",
  PU: "„Éó",
  PE: "„Éö",
  PO: "„Éù",
  BA: "„Éê",
  BI: "„Éì",
  BU: "„Éñ",
  BE: "„Éô",
  BO: "„Éú",
  MA: "„Éû",
  MI: "„Éü",
  MU: "„É†",
  ME: "„É°",
  MO: "„É¢",
  _MU: "„á∫",
  JA: "„É§",
  JI: "õÑ†",
  JU: "„É¶",
  JE: "õÑ°",
  JO: "„É®",
  _JA: "„É£",
  _JU: "„É•",
  _JO: "„Éß",
  RA: "„É©",
  RI: "„É™",
  RU: "„É´",
  RE: "„É¨",
  RO: "„É≠",
  _RA: "„áª",
  _RI: "„áº",
  _RU: "„áΩ",
  _RE: "„áæ",
  _RO: "„áø",
  WA: "„ÉØ",
  WI: "„É∞",
  WU: "õÑ¢",
  WE: "„É±",
  WO: "„É≤",
  _WA: "„ÉÆ",
  _WI: "õÖ§",
  _WE: "õÖ•",
  _WO: "õÖ¶",
  VA: "„É∑",
  VI: "„É∏",
  VU: "„É¥",
  VE: "„Éπ",
  VO: "„É∫",
  N: "„É≥",
  _N: "õÖß",
  ITI: "„ÉΩ",
  "ITI:": "„Éæ",

  "-": "„Éº",
  "#:": "\u3099",
  ":": "„Çõ",
  "#@": "\u309a",
  "@": "„Çú",
  ",": "„ÄÅ",
  ".": "„ÄÇ",
  "?": "Ôºü",
  "!": "ÔºÅ",
  "*": "„Éª",
  "..": "‚Ä•",
  "...": "‚Ä¶",
  "(": "Ôºà",
  ")": "Ôºâ",
  "[": "„Äå",
  "]": "„Äç",
  "[[": "„Äé",
  "]]": "„Äè",
});

for (const isKata of [false, true]) {
  for (const k0 of "k c s z t d n f p b m j r w v".split(" "))
    for (const [vowel, ks1] of [
      ["i", "ja ju jo"],
      ["u", "wa wi we wo"],
    ])
      for (const k1 of ks1.split(" ")) {
        const v0 = isKata ? dict[(k0 + vowel).toUpperCase()] : dict[k0 + vowel];
        const v1 = isKata ? dict["_" + k1.toUpperCase()] : dict["_" + k1];
        const k = isKata ? (k0 + k1).toUpperCase() : k0 + k1;

        if (v0 && v1) dict[k] = [v0 + v1];
      }

  for (const k0 of "k c s z t d f p b r v".split(" "))
    for (const k1 of "a i u e o".split(" ")) {
      const v0 = isKata ? dict["_TU"] : dict["_tu"];
      const v1 = isKata ? dict[(k0 + k1).toUpperCase()] : dict[k0 + k1];
      const k = isKata ? (k0 + k0 + k1).toUpperCase() : k0 + k0 + k1;

      if (v1) dict[k] = [v0 + v1];
    }
}

// hanz
if (false)
  for (const line of fs
    .readFileSync(process.env.HOME + "/Downloads/Unihan/Unihan_Readings.txt")
    .toString()
    .trim()
    .split("\n"))
    if (line[0] !== "#") {
      const row = line.split(/\t/g);
      if (row[1] !== "kJapaneseOn") continue;

      const hanz = String.fromCharCode(parseInt(row[0].replace("U+", "0x")));
      if (!hanzInRange(hanz)) continue;
      if (hanz in scToTcs) continue;
      if (!hanzInRange(hanz)) {
        console.log("uncommon", hanz);
        continue;
      }

      for (const latnOld of row[2].split(/ /g)) {
        latn = replaceEach(latnOld.toLowerCase(), [
          [/shi/g, "si"],
          [/sh/g, "sy"],
          [/ji/g, "zi"],
          [/j/g, "zy"],
          [/tsu/g, "tu"],
          [/chi/g, "ti"],
          [/ch/g, "ty"],
          [/h/g, "f"],
          [/g/g, "c"],
          [/y/g, "j"],

          [/juu/g, "iu"],
          [/jou/g, "eu"],

          [/(?<=[aiueo][ktf])[iu]$/g, ""],
        ]);

        if (hanz === "Âá∫") console.log(hanz, latn);

        if (/[aiueo][^aiueo][aiueo]/.test(latn)) {
          //console.log("two vowels", hanz, latn);
          continue;
        }

        if (/[auieo]{3,}/.test(latn)) {
          //console.log("three vowel", hanz, latn);
          continue;
        }

        if (/a[aeo]|i[aieo]|u[aeo]|e[aeo]|o[aeo]/.test(latn)) {
          //console.log("hiatus", hanz, latn);
          continue;
        }

        latn = latn.slice(0, 1).toUpperCase() + latn.slice(1);

        if (dict[latn]) {
          if (!dict[latn].includes(hanz)) dict[latn].push(hanz);
        } else dict[latn] = [hanz];
      }
    }

for (let i = 0; i < 10; i++)
  for (const line of fs
    .readFileSync(
      `${__dirname}/../submodules/mozc/src/data/dictionary_oss/dictionary0${i}.txt`,
    )
    .toString()
    .trim()
    .split("\n")) {
    const row = line.split(/\t/g);
    if (!/^\p{sc=Han}+$/u.test(row[4])) continue;

    const word = row[4].replace(/./g, (h) =>
      h in scToTcs && scToTcs[h].length == 1 ? scToTcs[h][0] : h,
    );

    const latn = replaceEach(row[0], [
      [/„ÅÇ/g, "a"],
      [/„ÅÑ/g, "i"],
      [/„ÅÜ/g, "u"],
      [/„Åà/g, "e"],
      [/„Åä/g, "o"],

      [/„Åã/g, "ka"],
      [/„Åç/g, "ki"],
      [/„Åè/g, "ku"],
      [/„Åë/g, "ke"],
      [/„Åì/g, "ko"],

      [/„Åå/g, "ca"],
      [/„Åé/g, "ci"],
      [/„Åê/g, "cu"],
      [/„Åí/g, "ce"],
      [/„Åî/g, "co"],

      [/„Åï/g, "sa"],
      [/„Åó/g, "si"],
      [/„Åô/g, "su"],
      [/„Åõ/g, "se"],
      [/„Åù/g, "so"],

      [/„Åñ/g, "za"],
      [/„Åò/g, "zi"],
      [/„Åö/g, "zu"],
      [/„Åú/g, "ze"],
      [/„Åû/g, "zo"],

      [/„Åü/g, "ta"],
      [/„Å°/g, "ti"],
      [/„Å§/g, "tu"],
      [/„Å¶/g, "te"],
      [/„Å®/g, "to"],

      [/„Å†/g, "da"],
      [/„Å¢/g, "di"],
      [/„Å•/g, "du"],
      [/„Åß/g, "de"],
      [/„Å©/g, "do"],

      [/„Å™/g, "na"],
      [/„Å´/g, "ni"],
      [/„Å¨/g, "nu"],
      [/„Å≠/g, "ne"],
      [/„ÅÆ/g, "no"],

      [/„ÅØ/g, "fa"],
      [/„Å≤/g, "fi"],
      [/„Åµ/g, "fu"],
      [/„Å∏/g, "fe"],
      [/„Åª/g, "fo"],

      [/„Å±/g, "pa"],
      [/„Å¥/g, "pi"],
      [/„Å∑/g, "pu"],
      [/„Å∫/g, "pe"],
      [/„ÅΩ/g, "po"],

      [/„Å∞/g, "ba"],
      [/„Å≥/g, "bi"],
      [/„Å∂/g, "bu"],
      [/„Åπ/g, "be"],
      [/„Åº/g, "bo"],

      [/„Åæ/g, "ma"],
      [/„Åø/g, "mi"],
      [/„ÇÄ/g, "mu"],
      [/„ÇÅ/g, "me"],
      [/„ÇÇ/g, "mo"],

      [/„ÇÑ/g, "ja"],
      [/„ÇÜ/g, "ju"],
      [/„Çà/g, "jo"],

      [/„Çâ/g, "ra"],
      [/„Çä/g, "ri"],
      [/„Çã/g, "ru"],
      [/„Çå/g, "re"],
      [/„Çç/g, "ro"],

      [/„Çè/g, "wa"],
      [/„Çê/g, "wi"],
      [/„Çë/g, "we"],
      [/„Çí/g, "wo"],

      [/„Çì/g, "n"],
      [/„Å£(.)/g, "$1$1"],
      [/„Å£/g, "t"],
      [/i„ÇÉ/g, "ja"],
      [/i„ÇÖ/g, "ju"],
      [/i„Çá/g, "jo"],
      [/u„Çé/g, "wa"],

      [/juu/g, "iu"],
      [/jou/g, "eu"],
    ]);

    if (dict[latn]) {
      if (!dict[latn].includes(word)) dict[latn].push(word);
    } else dict[latn] = [word];
  }

fs.writeFileSync(
  __dirname + "/../SumiInput/dicts.bundle/ja.json",
  JSON.stringify({ name: "Êó•Êú¨Ë™û", dict }, null, 2),
);
